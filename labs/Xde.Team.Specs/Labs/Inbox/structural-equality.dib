#!csharp

public interface IStructurallyEqual<T>
    : IEquatable<T>
{
    //TODO:Call to some helper, probably generated by source generators
    bool IEquatable<T>.Equals(T other) => true;
}

#!csharp

public class One
    : IStructurallyEqual<Two>
{
    public static bool operator ==(One left, Two right) =>
        (left as IEquatable<Two>).Equals(right)
    ;

    public static bool operator !=(One left, Two right) => !(left == right);
}

public class Two
    : IStructurallyEqual<One>
{

}

// Without IEquatable
public class Three
{
    public static bool operator ==(Three left, Four right) => true;

    public static bool operator !=(Three left, Four right) => false;
}

public class Four
{

}

#!csharp

var one = new One();
var two = new Two();
var three = new Three();
var four = new Four();

Console.WriteLine(one == two);
Console.WriteLine(three == four);

#!markdown

TODO: Potentially this solution could work in a solution where classes are not created manually at all. Only interfaces are define and all relevant classes are generated automatically.
