import { Article } from "@/components/Article";
import Specs from "@/labs/software/executable-specs";

const Page = () => (
    <Article>
        <h1>{ Specs.Caption }</h1>

        <h2>InBox</h2>

        <p>
            Изначально концепция &quot;Executable Specifications&quot; касалась в большей степени
            подхода BDD (Behavior-Driven Development) и конкретно язык Gherkin. Он всем своим
            видом старался походить на бизнес-язык, но в то же время за описанными на нём
            бизнес-требованиями стоял конкретный код, проверяющий, что создаваемое приложение
            соответствует этим требованиям.
        </p>

        <p>
            Но мы попробуем расширить эту концепцию, поскольку стейкхолдеры &ndash; не единственные
            участники производственного процесса.
        </p>

        <p>
            Всякий продукт обычно начинается со спецификации. Точнее &ndash; первичного исследования
            предметной области, решаемых проблем и т.п.
        </p>

        <h2>Черновое описание процесса (на примере .NET)</h2>
        <p>
            Создаётся Specs-сборка. Например, Xde.App.Specs. И на неё ложится целый спектр ролей:
        </p>
        <ul>
            <li>
                Выполняет роль SSoT (Single Source of Truth). Вся информация, которая поступает
                разработчикам, в том или ином виде размещается в этой сборке.
            </li>
            <li>
                Объединяет и координирует все остальные сборки. По мере формализации тех или иных
                элементов решения, они выделяются в отдельные сборки, например Xde.App.Security,
                но остаются включёнными в эту основную Specs-сборку.
            </li>
            <li>
                Является единым командным центом. Эта сборка является консольным приложением, которое
                отвечает за тесты, настройки рабочих мест, развертывание решений и любую другую задачу.
            </li>
        </ul>

        <p>
            Таким образом эта Specs-сборка содержит не только всю информацию, суть спецификацию решения,
            к какому бы участку оно не относилось, но и старается делать их исполняемыми. Таким образом,
            можно запускать не только BDD-спецификации, но и развертывание Development/Staging/Production
            сред для запуска продукта, специфицированных на своём языке и так далее.
        </p>

        <p>
            Примеры интегрированных в данную сборку решений:
        </p>
        <ul>
            <li>Сборка приложения;</li>
            <li>Развертывание инфраструктуры;</li>
            <li>Тесты самых различных видов (unit, integration, e2e);</li>
            <li>Веб-сервер документации и генерация документации;</li>
            <li>Различные ETL-задачи;</li>
        </ul>

        <p>
            Бизнес функции можно начинать размещать в Specflow-спецификациях, для начала в виде комментариев.
            Может с минимальным требованием вроде &quot;Then Smth&quot;, чтобы сразу был failing test.
        </p>
        <p>
            https://github.com/scriban/scriban
        </p>
    </Article>
)

export default Page;
